[{"C:\\Users\\user\\Desktop\\ToDo\\my-app\\src\\index.js":"1","C:\\Users\\user\\Desktop\\ToDo\\my-app\\src\\App.js":"2","C:\\Users\\user\\Desktop\\ToDo\\my-app\\src\\reportWebVitals.js":"3","C:\\Users\\user\\Desktop\\ToDo\\my-app\\src\\ToDo.js":"4","C:\\Users\\user\\Desktop\\ToDo\\my-app\\src\\idGenerator.js":"5","C:\\Users\\user\\Desktop\\ToDo\\my-app\\src\\Task.js":"6","C:\\Users\\user\\Desktop\\ToDo\\my-app\\src\\Modal.js":"7","C:\\Users\\user\\Desktop\\ToDo\\my-app\\src\\EditTaskModal.js":"8","C:\\Users\\user\\Desktop\\ToDo\\my-app\\src\\AddTask.js":"9","C:\\Users\\user\\Desktop\\ToDo\\my-app\\src\\navBar\\AboutUs.js":"10","C:\\Users\\user\\Desktop\\ToDo\\my-app\\src\\navBar\\ContactUs.js":"11","C:\\Users\\user\\Desktop\\ToDo\\my-app\\src\\navBar\\Home.js":"12"},{"size":500,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":944,"mtime":1611845257519,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"14"},{"size":7488,"mtime":1610922771405,"results":"17","hashOfConfig":"14"},{"size":78,"mtime":1607018190188,"results":"18","hashOfConfig":"14"},{"size":1949,"mtime":1610923568687,"results":"19","hashOfConfig":"14"},{"size":897,"mtime":1607548876355,"results":"20","hashOfConfig":"14"},{"size":1473,"mtime":1610832900733,"results":"21","hashOfConfig":"14"},{"size":2639,"mtime":1610923300799,"results":"22","hashOfConfig":"14"},{"size":113,"mtime":1611774305145,"results":"23","hashOfConfig":"14"},{"size":117,"mtime":1611774313555,"results":"24","hashOfConfig":"14"},{"size":106,"mtime":1611774352580,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"fgvtq4",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\user\\Desktop\\ToDo\\my-app\\src\\index.js",[],["54","55"],"C:\\Users\\user\\Desktop\\ToDo\\my-app\\src\\App.js",["56"],"C:\\Users\\user\\Desktop\\ToDo\\my-app\\src\\reportWebVitals.js",[],"C:\\Users\\user\\Desktop\\ToDo\\my-app\\src\\ToDo.js",["57","58","59"],"import React, { PureComponent } from 'react'\r\nimport Task from './Task'\r\nimport AddTask from './AddTask'\r\nimport EditTaskModal from './EditTaskModal'\r\nimport { Container, Col, Row, Button, Modal } from 'react-bootstrap'\r\nimport idGenerator from './idGenerator'\r\nimport ConfirmDelete from './Modal'\r\nimport './ToDo.css'\r\n\r\n\r\nclass ToDo extends PureComponent {\r\n    state = {\r\n        tasks: [],\r\n        selectedTasks: new Set(),\r\n        toggle: false,\r\n        editTask: null,\r\n        addModalToggle: false\r\n        \r\n    }\r\n\r\n    handleCheck = (id) => {\r\n        const selectedTasks = new Set(this.state.selectedTasks)\r\n\r\n        if (selectedTasks.has(id)) {\r\n            selectedTasks.delete(id)\r\n        } else {\r\n            selectedTasks.add(id)\r\n        }\r\n\r\n        this.setState({\r\n            selectedTasks\r\n        })\r\n    }\r\n\r\n    toggleConfirm = () => {\r\n        this.setState({\r\n            toggle: !this.state.toggle\r\n        })\r\n    }\r\n\r\n    toggleEditModal = (task) => {\r\n        this.setState({\r\n            editTask: task\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"http://localhost:3001/task\", {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        )\r\n            .then(res => res.json())\r\n            .then(response => {\r\n\r\n                this.setState({\r\n                    tasks: response\r\n                })\r\n            })\r\n\r\n    }\r\n\r\n    handleMultipleDelete = () => {\r\n\r\n        const body = {\r\n            tasks: [...this.state.selectedTasks]\r\n        }\r\n        fetch(\"http://localhost:3001/task\", {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        )\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                let tasks = [...this.state.tasks]\r\n                this.state.selectedTasks.forEach((id) => {\r\n                    tasks = tasks.filter((task) => task._id !== id)\r\n                })\r\n\r\n                this.setState({\r\n                    tasks: tasks,\r\n                    selectedTasks: new Set(),\r\n                    toggle: false\r\n                })\r\n            })\r\n    }\r\n\r\n\r\n    addTask = (data) => {\r\n        const body = JSON.stringify(data)\r\n        fetch(\"http://localhost:3001/task\", {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body\r\n        }\r\n        )\r\n            .then(res => res.json())\r\n            .then(response => {\r\n                if (response.error) {\r\n                    throw response.error;\r\n                }\r\n                const newTasks = [...this.state.tasks, response]\r\n\r\n                this.setState({\r\n                    tasks: newTasks,\r\n                    addModalToggle: false\r\n                })\r\n            })\r\n    }\r\n\r\n    handleDelete = (id) => {\r\n        fetch(`http://localhost:3001/task/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        )\r\n            .then(res => res.json())\r\n            .then(response => {\r\n                const newArr = this.state.tasks.filter((el) => el._id !== id)\r\n\r\n                this.setState({\r\n                    tasks: newArr\r\n                })\r\n            })\r\n    }\r\n\r\n    handleEdit = (task) => {\r\n        this.setState({\r\n            editTask: task\r\n        })\r\n    }\r\n\r\n    f = (task) => {\r\n        console.log(task)\r\n        const body = JSON.stringify(task);\r\n        fetch(`http://localhost:3001/task/${task._id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body\r\n        }\r\n        )\r\n            .then(res => res.json())\r\n            .then(response => {\r\n                const changedItemIndex = this.state.tasks.findIndex((el) => el._id == task._id)\r\n                const tasks = this.state.tasks\r\n                tasks[changedItemIndex] = task\r\n\r\n\r\n                this.setState({\r\n                    tasks: tasks,\r\n                    editTask: null\r\n                })\r\n            })\r\n    }\r\n\r\n    toggleAddModal = () => {\r\n        this.setState({\r\n            addModalToggle: !this.state.addModalToggle\r\n        }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { editTask } = this.state\r\n        return (\r\n            <>\r\n                <div className='container'>\r\n                    <Container className='mt-4'>\r\n                        <Row className='justify-content-center'>\r\n                            \r\n                                <Button\r\n                                    variant='primary'\r\n                                    onClick={this.toggleAddModal}\r\n                                    disabled={this.state.selectedTasks.size === 0 ? false : true}\r\n                                >\r\n                                    AddTask\r\n                                </Button>\r\n                          \r\n                        </Row>\r\n                        <Row className='justify-content-center'>\r\n                            <Button\r\n                                className='deleteSelected'\r\n                                variant='danger'\r\n                                onClick={this.toggleConfirm}\r\n                                disabled={this.state.selectedTasks.size === 0 ? true : false}\r\n                            >\r\n                                Delete\r\n                        </Button>\r\n                        </Row>\r\n                    </Container>\r\n                    <Row className='justify-content-center'>\r\n                        {\r\n                            this.state.tasks.map((task, i) => {\r\n                                return (\r\n                                    <Col key={task._id}>\r\n                                        <Task  \r\n                                            data={task}\r\n                                            onRemove={this.handleDelete}\r\n                                            handleCheck={this.handleCheck}\r\n                                            onEdit={() => this.toggleEditModal(task)}\r\n                                        />\r\n                                    </Col>\r\n                                )\r\n                            })\r\n\r\n                        }\r\n                    </Row>\r\n                    <ConfirmDelete\r\n                        count={this.state.selectedTasks.size}\r\n                        toggle={this.state.toggle}\r\n                        onClose={this.toggleConfirm}\r\n                        delete={this.handleMultipleDelete}\r\n                    />\r\n                    {\r\n                        !!this.state.editTask && <EditTaskModal\r\n                            data={editTask}\r\n                            onSave={(task) => this.f(task)}\r\n                            onClose={() => this.toggleEditModal(null)} />\r\n                    }\r\n                    {\r\n                    this.state.addModalToggle &&\r\n                    <AddTask\r\n                        onClose={this.toggleAddModal}\r\n                        onAdd={this.addTask}\r\n                        disabled={!!this.state.selectedTasks.size}\r\n                    />\r\n                }\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToDo","C:\\Users\\user\\Desktop\\ToDo\\my-app\\src\\idGenerator.js",["60"],"export default function() {\r\n    return Math.random().toString(32).slice(2)\r\n}","C:\\Users\\user\\Desktop\\ToDo\\my-app\\src\\Task.js",[],"C:\\Users\\user\\Desktop\\ToDo\\my-app\\src\\Modal.js",[],"C:\\Users\\user\\Desktop\\ToDo\\my-app\\src\\EditTaskModal.js",["61"],"import React, { Component } from 'react'\r\nimport { Modal, Button } from 'react-bootstrap'\r\nimport './EditTaskModal.css'\r\n\r\nclass EditTaskModal extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            ...this.props.data\r\n        }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            title: event.target.value\r\n        })\r\n    }\r\n\r\n    handleSave = () => {\r\n        const task = this.state;\r\n        this.props.onSave(task)\r\n    }\r\n\r\n    render() {\r\n        const editTask = this.props.data;\r\n        return (\r\n            <Modal show={true} onHide={this.props.onClose}>\r\n                <Modal.Header>\r\n                    <Modal.Title>Edit task</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <input type='text'\r\n                        className='input'\r\n                        value={this.state.text}\r\n                        onChange={(event) => this.handleChange(event)}\r\n\r\n                    />\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"primary\" onClick={this.handleSave}>\r\n                        Save\r\n                </Button>\r\n                    <Button variant=\"secondary\" onClick={this.props.onClose}>\r\n                        Cancel\r\n                </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default EditTaskModal\r\n","C:\\Users\\user\\Desktop\\ToDo\\my-app\\src\\AddTask.js",[],"C:\\Users\\user\\Desktop\\ToDo\\my-app\\src\\navBar\\AboutUs.js",[],"C:\\Users\\user\\Desktop\\ToDo\\my-app\\src\\navBar\\ContactUs.js",[],"C:\\Users\\user\\Desktop\\ToDo\\my-app\\src\\navBar\\Home.js",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":28,"column":33,"nodeType":"68","endLine":28,"endColumn":38},{"ruleId":"69","severity":1,"message":"70","line":5,"column":39,"nodeType":"71","messageId":"72","endLine":5,"endColumn":44},{"ruleId":"69","severity":1,"message":"73","line":6,"column":8,"nodeType":"71","messageId":"72","endLine":6,"endColumn":19},{"ruleId":"74","severity":1,"message":"75","line":155,"column":84,"nodeType":"76","messageId":"77","endLine":155,"endColumn":86},{"ruleId":"78","severity":1,"message":"79","line":1,"column":1,"nodeType":"80","endLine":3,"endColumn":2},{"ruleId":"69","severity":1,"message":"81","line":26,"column":15,"nodeType":"71","messageId":"72","endLine":26,"endColumn":23},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-unused-vars","'Modal' is defined but never used.","Identifier","unusedVar","'idGenerator' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'editTask' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]